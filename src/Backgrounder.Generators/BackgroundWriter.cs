using System;
using System.Collections.Generic;
using System.Text;

using Backgrounder.Generators.Internal;

namespace Backgrounder.Generators;

public static class BackgroundWriter
{
    public static string Generate(BackgroundMethod backgroundMethod)
    {
        if (backgroundMethod == null)
            throw new ArgumentNullException(nameof(backgroundMethod));

        var codeBuilder = new IndentedStringBuilder();
        codeBuilder
            .AppendLine("// <auto-generated />")
            .AppendLine("#nullable enable")
            .AppendLine();

        codeBuilder
            .Append("namespace ")
            .AppendLine(backgroundMethod.ClassNamespace)
            .AppendLine("{")
            .IncrementIndent();

        codeBuilder
            .AppendLine("/// <summary>")
            .AppendLine("/// Extension methods for Backgrounder")
            .AppendLine("/// </summary>");

        codeBuilder
            .Append("public static partial class ")
            .Append(backgroundMethod.ClassName)
            .Append(backgroundMethod.MethodName)
            .AppendLine("Extensions")
            .AppendLine("{")
            .IncrementIndent();

        WriteRecordMesssage(codeBuilder, backgroundMethod);
        WriteBackgrounderExtension(codeBuilder, backgroundMethod);
        WriteExecuteMethod(codeBuilder, backgroundMethod);
        WriteRegisterMethod(codeBuilder, backgroundMethod);

        codeBuilder
            .DecrementIndent()
            .AppendLine("}") // class
            .DecrementIndent()
            .AppendLine("}"); // namespace

        return codeBuilder.ToString();
    }

    private static void WriteBackgrounderExtension(IndentedStringBuilder codeBuilder, BackgroundMethod backgroundMethod)
    {
        bool hasParameters = backgroundMethod.Parameters.Count > 0;

        codeBuilder
            .AppendLine("/// <summary>")
            .Append("/// Enqueue the method ")
            .Append(backgroundMethod.MethodSignature)
            .AppendLine(" for execution in the background")
            .AppendLine("/// </summary>");

        codeBuilder
            .Append("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"")
            .Append(ThisAssembly.Product)
            .Append("\", \"")
            .Append(ThisAssembly.InformationalVersion)
            .AppendLine("\")]");

        codeBuilder
            .Append("public static async global::System.Threading.Tasks.Task ")
            .Append(backgroundMethod.ExtensionName ?? backgroundMethod.MethodName)
            .Append("(")
            .Append("this global::Backgrounder.IBackgrounder backgrounder");

        foreach (var parameter in backgroundMethod.Parameters)
        {
            codeBuilder
                .Append(", ")
                .Append(parameter.ParameterType)
                .Append(" ")
                .Append(parameter.ParameterName);
        }

        codeBuilder
            .AppendLine(")")
            .AppendLine("{")
            .IncrementIndent();

        if (hasParameters)
        {
            codeBuilder
                .Append("var methodParameters = new ")
                .Append(backgroundMethod.MethodName)
                .Append("Message")
                .Append(backgroundMethod.MethodHash)
                .Append("(")
                .AppendJoin(backgroundMethod.Parameters.Select(p => p.ParameterName), ", ")
                .AppendLine(");");

            codeBuilder
                .Append("await backgrounder.EnqueueAsync(\"")
                .Append(backgroundMethod.MethodSignature)
                .Append("\"")
                .Append(", methodParameters);")
                .AppendLine();
        }
        else
        {
            codeBuilder
                .Append("await backgrounder.EnqueueAsync<object?>(\"")
                .Append(backgroundMethod.MethodSignature)
                .Append("\", default);")
                .AppendLine();
        }

        codeBuilder
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();
    }

    private static void WriteExecuteMethod(IndentedStringBuilder codeBuilder, BackgroundMethod backgroundMethod)
    {
        bool hasParameters = backgroundMethod.Parameters.Count > 0;

        codeBuilder
            .Append("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"")
            .Append(ThisAssembly.Product)
            .Append("\", \"")
            .Append(ThisAssembly.InformationalVersion)
            .AppendLine("\")]");

        codeBuilder
            .Append("internal static ")
            .AppendIf("async ", backgroundMethod.IsAsync)
            .Append("global::System.Threading.Tasks.Task ")
            .Append("Execute")
            .Append(backgroundMethod.MethodName)
            .Append(backgroundMethod.MethodHash)
            .Append("(")
            .Append("global::System.IServiceProvider serviceProvider")
            .Append(", ")
            .Append("byte[] messageBody")
            .AppendLine(")")
            .AppendLine("{")
            .IncrementIndent();

        if (hasParameters)
        {
            codeBuilder
                .AppendLine("var messageSerializer = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Backgrounder.IMessageSerializer>(serviceProvider);");

            codeBuilder
                .Append("var methodParameters = messageSerializer.Deserialize<")
                .Append(backgroundMethod.MethodName)
                .Append("Message")
                .Append(backgroundMethod.MethodHash)
                .Append(">(messageBody);")
                .AppendLine();
        }

        var instance = backgroundMethod.IsStatic
            ? $"{backgroundMethod.ClassNamespace}.{backgroundMethod.ClassName}"
            : "worker";

        if (!backgroundMethod.IsStatic)
        {
            codeBuilder
                .Append("var worker = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<")
                .Append(backgroundMethod.ServiceType ?? backgroundMethod.ClassName)
                .AppendLine(">(serviceProvider);");
        }

        var awaiter = backgroundMethod.IsAsync ? "await " : string.Empty;

        codeBuilder
            .AppendIf(awaiter, v => !string.IsNullOrEmpty(v))
            .Append(instance)
            .Append(".")
            .Append(backgroundMethod.MethodName)
            .Append('(')
            .AppendJoin(backgroundMethod.Parameters.Select(p => $"methodParameters.{p.ParameterName}"), ", ")
            .AppendLine(");");

        if (!backgroundMethod.IsAsync)
            codeBuilder.AppendLine("return global::System.Threading.Tasks.Task.CompletedTask;");

        codeBuilder
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();
    }

    private static void WriteRegisterMethod(IndentedStringBuilder codeBuilder, BackgroundMethod backgroundMethod)
    {
        codeBuilder
            .AppendLine("[global::System.Runtime.CompilerServices.ModuleInitializerAttribute]");

        codeBuilder
            .Append("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"")
            .Append(ThisAssembly.Product)
            .Append("\", \"")
            .Append(ThisAssembly.InformationalVersion)
            .AppendLine("\")]");

        codeBuilder
            .Append("internal static void ")
            .Append("Register")
            .Append(backgroundMethod.MethodName)
            .Append(backgroundMethod.MethodHash)
            .AppendLine("()")
            .AppendLine("{")
            .IncrementIndent();

        codeBuilder
            .Append("BackgroundRouter.Register(\"")
            .Append(backgroundMethod.MethodSignature)
            .Append("\", ")
            .Append(backgroundMethod.ClassNamespace)
            .Append(".")
            .Append(backgroundMethod.ClassName)
            .Append(backgroundMethod.MethodName)
            .Append("Extensions")
            .Append(".Execute")
            .Append(backgroundMethod.MethodName)
            .Append(backgroundMethod.MethodHash)
            .Append(");")
            .AppendLine();

        codeBuilder
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();

    }

    private static void WriteRecordMesssage(IndentedStringBuilder codeBuilder, BackgroundMethod backgroundMethod)
    {
        codeBuilder
            .Append("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"")
            .Append(ThisAssembly.Product)
            .Append("\", \"")
            .Append(ThisAssembly.InformationalVersion)
            .AppendLine("\")]");

        codeBuilder
            .Append("public record ")
            .Append(backgroundMethod.MethodName)
            .Append("Message")
            .Append(backgroundMethod.MethodHash)
            .Append("(");

        bool wrote = false;
        foreach (var parameter in backgroundMethod.Parameters)
        {
            codeBuilder
                .AppendIf(", ", wrote)
                .Append(parameter.ParameterType)
                .Append(" ")
                .Append(parameter.ParameterName);

            wrote = true;
        }

        codeBuilder
            .AppendLine(");")
            .AppendLine();

    }
}
