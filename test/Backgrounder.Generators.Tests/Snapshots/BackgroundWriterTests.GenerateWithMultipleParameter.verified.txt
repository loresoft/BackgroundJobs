// <auto-generated />
#nullable enable

namespace Backgrounder.Sample
{
    /// <summary>
    /// Extension methods for Backgrounder
    /// </summary>
    public static partial class SampleJobMultipleParameterExtensions
    {
        public record MultipleParameterMessageXEWDF(int? jobId, string? name);

        /// <summary>
        /// Enqueue the method public Task DoWork(int?, string?) for execution in the background
        /// </summary>
        public static async global::System.Threading.Tasks.Task MultipleParameter(this global::Backgrounder.IBackgrounder backgrounder, int? jobId, string? name)
        {
            var methodParameters = new MultipleParameterMessageXEWDF(jobId, name);
            await backgrounder.EnqueueAsync("public Task DoWork(int?, string?)", methodParameters);
        }

        internal static async global::System.Threading.Tasks.Task ExecuteMultipleParameterXEWDF(global::System.IServiceProvider serviceProvider, byte[] messageBody)
        {
            var messageSerializer = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Backgrounder.IMessageSerializer>(serviceProvider);
            var methodParameters = messageSerializer.Deserialize<MultipleParameterMessageXEWDF>(messageBody);
            var worker = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ISampleJob>(serviceProvider);
            await worker.MultipleParameter(methodParameters.jobId, methodParameters.name);
        }

        [global::System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void RegisterMultipleParameterXEWDF()
        {
            BackgroundRouter.Register("public Task DoWork(int?, string?)", Backgrounder.Sample.SampleJobMultipleParameterExtensions.ExecuteMultipleParameterXEWDF);
        }

    }
}
