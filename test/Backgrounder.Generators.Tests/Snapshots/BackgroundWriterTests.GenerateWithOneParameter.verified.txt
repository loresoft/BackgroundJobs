// <auto-generated />
#nullable enable

namespace Backgrounder.Sample
{
    /// <summary>
    /// Extension methods for Backgrounder
    /// </summary>
    public static partial class SampleJobDoWorkExtensions
    {
        /// <summary>
        /// Enqueue the method public Task DoWork(int?) for execution in the background
        /// </summary>
        public static async global::System.Threading.Tasks.Task DoWork(this global::Backgrounder.IBackgrounder backgrounder, int? jobId)
        {
            var parameterTuple = new global::System.Tuple<int?>(jobId);
            await backgrounder.EnqueueAsync("public Task DoWork(int?)", parameterTuple);
        }

        internal static async global::System.Threading.Tasks.Task ExecuteDoWorkABCD(global::System.IServiceProvider serviceProvider, byte[] messageBody)
        {
            var messageSerializer = serviceProvider.GetRequiredService<global::Backgrounder.IMessageSerializer>();
            var methodParameters = messageSerializer.Deserialize<global::System.Tuple<int?>>(messageBody);
            var worker = serviceProvider.GetRequiredService<SampleJob>();
            await worker.DoWork(methodParameters.Item1);
        }

        [global::System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void RegisterDoWorkABCD()
        {
            BackgroundRouter.Register("public Task DoWork(int?)", Backgrounder.Sample.SampleJobDoWorkExtensions.ExecuteDoWorkABCD);
        }

    }
}
