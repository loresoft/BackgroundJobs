// <auto-generated />
#nullable enable

namespace Backgrounder.Sample
{
    /// <summary>
    /// Extension methods for Backgrounder
    /// </summary>
    public static partial class SampleJobDoWorkExtensions
    {
        public record DoWorkMessageABCD(int? jobId);

        /// <summary>
        /// Enqueue the method public Task DoWork(int?) for execution in the background
        /// </summary>
        public static async global::System.Threading.Tasks.Task DoWork(this global::Backgrounder.IBackgrounder backgrounder, int? jobId)
        {
            var methodParameters = new DoWorkMessageABCD(jobId);
            await backgrounder.EnqueueAsync("public Task DoWork(int?)", methodParameters);
        }

        internal static async global::System.Threading.Tasks.Task ExecuteDoWorkABCD(global::System.IServiceProvider serviceProvider, byte[] messageBody)
        {
            var messageSerializer = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Backgrounder.IMessageSerializer>(serviceProvider);
            var methodParameters = messageSerializer.Deserialize<DoWorkMessageABCD>(messageBody);
            var worker = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<SampleJob>(serviceProvider);
            await worker.DoWork(methodParameters.jobId);
        }

        [global::System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void RegisterDoWorkABCD()
        {
            BackgroundRouter.Register("public Task DoWork(int?)", Backgrounder.Sample.SampleJobDoWorkExtensions.ExecuteDoWorkABCD);
        }

    }
}
